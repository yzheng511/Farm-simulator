package model;

import org.json.JSONArray;
import org.json.JSONObject;
import persistence.Writable;

import java.util.List;
import java.util.ArrayList;

//Represents a class containing player name,
//list of lands owned by player, and amount of money player has.
public class Player implements Writable {
    private String name;
    private List<Land> lands;
    private int money;
    private int year;

    /* Requires: playerName has non-Zero length
     * Effects: name is set to player name, money is set to initial money,
     *          lands is an empty list of land.
     */
    public Player(String playerName, int initialMoney) {
        name = playerName;
        lands = new ArrayList<>();
        money = initialMoney;
        year = 1;
    }

    // Effects: create new land object
    public Land createLand(int i) {
        return new Land(i);
    }


    //Modifies: this
    //Effects: add new land to player's land list, deduct land cost from money
    public void purchaseLand(Land land) {
        lands.add(land);
        money -= land.getCost();

    }

    //Modifies: this
    //Effects: set corp to one land in land list that doesn't have a corp and return true,
    //         if land list all have corp, return false
    public boolean plantCorp(Corp corp) {
        boolean hasEmptyLand = false;
        for (Land l : lands) {
            if (l.getPlant() == null) {
                l.setPlant(corp);
                hasEmptyLand = true;
                break;
            }
        }
        return hasEmptyLand;
    }

    //Modifies: this
    //Effects: add all land profit generated by the player's land list to money
    public void getProfit() {
        for (Land l : lands) {
            if (l.getPlant() != null) {
                money += l.getLandProfit();
            }
        }
    }

    public String getName() {
        return name;
    }

    public int getMoney() {
        return money;
    }

    public List<Land> getLands() {
        return lands;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int y) {
        year = y;
    }

    //Modifies: this
    //Effects: add one land to the list of lands
    public void addLand(Land l) {
        lands.add(l);
    }

    //Modifies: this
    //Effects: add one year to the current year
    public void addYear() {
        year++;
    }

    @Override
    public JSONObject toJson() {
        JSONObject json = new JSONObject();
        json.put("name", name);
        json.put("money", money);
        json.put("year", year);
        json.put("lands", landsToJson());
        return json;
    }

    //Effects: return the lands owned by the player as a JSON array
    public JSONArray landsToJson() {
        JSONArray jsonArray = new JSONArray();
        for (Land l : lands) {
            jsonArray.put(l.toJson());
        }
        return jsonArray;
    }
}
